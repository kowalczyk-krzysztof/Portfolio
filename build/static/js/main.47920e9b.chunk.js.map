{"version":3,"sources":["createGlobalStyle.ts","features/localization/locales.ts","features/themetoggle/themeToggleSlice.ts","components/navbar/navbar-styling.ts","components/navbar/Logo.tsx","components/navbar/LanguageToggle.tsx","features/localization/localizationSlice.ts","components/navbar/LinkList.tsx","components/navbar/FlexLinkList.tsx","components/navbar/ThemeToggle.tsx","components/navbar/LanguageButton.tsx","components/navbar/Navbar.tsx","components/navbar/MenuButton.tsx","components/contact/ContactForm.tsx","components/footer/footer-styling.ts","components/footer/ContactLinks.tsx","components/footer/Copyright.tsx","components/footer/Footer.tsx","components/about/about-styling.ts","components/about/Picture.tsx","components/about/TechnologyIcons.tsx","components/about/About.tsx","components/contact/contact-styling.ts","components/contact/EmailSentNotification.tsx","utils/regexEmail.ts","components/contact/ContactTitle.tsx","components/contact/Contact.tsx","components/homepage/homepage-styling.ts","components/homepage/Homepage.tsx","App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["ThemeNames","veryLightBlue","veryDarkBlue","darkBlue","lightGray","black","lightBlue","lightBlueHover","smallIcon","mediumIcon","font10px","font12px","font14px","font16px","LocaleNames","lightTheme","name","LIGHT","background","color","darkTheme","DARK","MainContainer","styled","div","ContentContainer","GlobalStyle","createGlobalStyle","theme","initialState","themeToggleSlice","createSlice","reducers","SET_THEME","state","action","payload","themeSelector","themeToggle","actions","MenuFade","keyframes","MenuIconWrapper","StyledLogo","StyledThemeToggle","h1","StyledThemeToggleSlider","input","StyledLanguage","StyledLanguageButtons","button","StyledLinks","props","display","StyledLink","NavLink","activeClassName","StyledFlexLinkList","StyledMenu","StyledMenuButton","StyledNavbar","nav","Logo","src","process","alt","role","width","height","FlagNames","AriaLables","locale_ENG","ENG","navbarHome","navbarAbout","navbarContact","homeH1","homeH2","homeDescription","homePassion","learnMore","buttonSend","contactH1","contactNameField","contactEmailField","contactMessageField","inputCharactersLeft","enterName","invalidEmail","enterMessage","sendEmailLoading","sendEmailSuccess","sendEmailFailure","contactMeText","aboutDescription","aboutTechnologies","aboutHobbies","locale_PL","PL","locale_JP","JP","locale","localizationSlice","SET_LOCALE","localizationSelector","localization","LinkList","setDisplay","useSelector","useEffect","document","addEventListener","clickAway","ref","useRef","e","MenuDisplay","NONE","current","contains","target","removeEventListener","closeMenuWhenRedirected","BLOCK","to","home","exact","onClick","about","contact","FlexLinkList","ThemeToggle","dispatch","useDispatch","themeToggler","isChecked","currentTarget","checked","type","defaultChecked","LanguageButton","language","localeName","flagName","aria","preventDefault","newLocale","setTimeout","LanguageToggle","MenuButton","scrollAway","once","onKeyDown","key","pressEsc","size","title","WarningVisibility","FieldBorderStyle","FieldShadowStyle","FieldNames","EmailSendingStyle","Navbar","useState","window","innerWidth","setWidth","handleResizeWindow","StyledContactLink","a","FooterIconWrapper","StyledCopyright","StyledContactList","StyledFooter","footer","ContactLinks","github","myEmail","linkedin","twitter","facebook","href","rel","Copyright","yearNow","Date","getFullYear","myName","Footer","StyledAboutContainer","main","StyledPictureContainer","StyledPicture","img","StyledTextContainer","StyledAboutWrapper","StyledTechnologyContainer","StyledTechnologyWrapper","StyledTechnologyIconWrapper","StyledTechnologyIcon","Picture","TechnologyIcons","About","StyledNotificationWarning","visibility","StyledButtonContainer","StyledEmailNotification","StyledCharactersLeft","p","StyledForm","form","StyledInput","border","shadow","StyledTextArea","textarea","StyledLabel","label","StyledContactTitleContainer","StyledFormElement","StyledContactLinkContainer","StyledContactLinkWrapper","StyledContactLinkBig","StyledSubmitButton","StyledContactContainer","EmailSentNotification","isEmailSent","setColor","text","setText","LOADING","SUCCESS","FAILURE","regexCheck","RegExp","test","serviceID","templateID","userID","ContactForm","formId","messageMaxLength","setName","HIDDEN","nameWarning","setNameWarning","DEFAULT","nameBorder","setNameBorder","nameShadow","setNameShadow","email","setEmail","emailWarning","setEmailWarning","emailBorder","setEmailBorder","emailShadow","setEmailShadow","message","setMessage","messageWarning","setMessageWarning","messageBorder","setMessageBorder","messageShadow","setMessageShadow","charactersLeft","setcharactersLeft","setIsEmailSent","onChange","targetValue","value","targetName","NAME","SHOW","EMAIL","MESSAGE","length","onSubmit","emailValidation","emailjs","send","res","status","id","htmlFor","placeholder","rows","maxLength","ContactTitle","Contact","StyledHomepageLink","Link","HomepageContent","Homepage","App","path","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","rootReducer","combineReducers","localizationReducer","themeToggleReducer","store","configureStore","reducer","devTools","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","ReactDOM","render","StrictMode","getElementById","URL","origin","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.47920e9b.chunk.js","sourcesContent":["// Redeux\r\nimport { ThemeProps } from './features/themetoggle/themeToggleSlice';\r\n// Styling\r\nimport styled from 'styled-components';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport '@fontsource/quicksand';\r\n/* \r\n\r\n      Global theme variables \r\n\r\n*/\r\n// Colors\r\nexport const veryLightBlue: string = '#d6e9f5';\r\nexport const veryDarkBlue: string = '#1B263B';\r\nexport const darkBlue: string = '#0d1b2a';\r\nexport const lightGray: string = '#e0e1dd';\r\nexport const black: string = '#000000';\r\nexport const lightBlue: string = '#4d96bb';\r\nexport const lightBlueHover: string = '#74b9db';\r\nexport const lightRed: string = '#f74848';\r\nexport const lightGreen: string = '#0F0';\r\n// Icons\r\nexport const smallIcon: string = '24';\r\nexport const mediumIcon: string = '36';\r\nexport const bigIcon: string = '38';\r\n// Font sizes\r\nexport const font10px: string = 'calc(10px + 1vh)';\r\nexport const font12px: string = 'calc(12px + 1vh)';\r\nexport const font14px: string = 'calc(14px + 1vh)';\r\nexport const font16px: string = 'calc(16px + 1vh)';\r\nexport const font20px: string = 'calc(20px + 1vh)';\r\nexport const font24px: string = 'calc(24px + 1vh)';\r\n\r\n/*Styled components global ThemeProps explained.\r\n1. Define an interface that will contain all theme props\r\n2. Define an interface CustomTheme with property \"theme\" that will be of type \"ThemeProps\" and use it in createGlobalStyle<CustomTheme>\r\n3. Wrap <App/> in <ThemeProvider and add a listener to store (or state) so you can toggle themes\r\n*/\r\nexport enum ThemeNames {\r\n  DARK = 'DARK',\r\n  LIGHT = 'LIGHT',\r\n}\r\nexport interface CustomTheme {\r\n  theme: ThemeProps;\r\n}\r\n\r\n// Light theme settings\r\nexport const lightTheme: ThemeProps = {\r\n  name: ThemeNames.LIGHT,\r\n  background: veryLightBlue,\r\n  color: black,\r\n};\r\n// Dark theme settings\r\nexport const darkTheme: ThemeProps = {\r\n  name: ThemeNames.DARK,\r\n  background: veryDarkBlue,\r\n  color: lightGray,\r\n};\r\n\r\n/*\r\n    SUPER IMPORTANT !!!!!!!!!!!!!!!!!!!!!\r\n\r\n    For footer to work properly with react-router, you need both MainContainer and ContentContainer containers to wrap around <Switch> like this\r\n    \r\n        <MainContainer>\r\n          <ContentContainer>\r\n            <Switch>\r\n              <Routes>\r\n            </Switch>\r\n          </ContentContainer>\r\n        </MainContainer>\r\n\r\n*/\r\nexport const MainContainer = styled.div`\r\n  /** Note: Container needs to have height of 100vh otherwise footer won't be at the bottom of the viewport */\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: auto 1fr auto;\r\n  grid-template-areas: 'navbar' 'content' 'footer';\r\n  min-height: 100vh;\r\n`;\r\n\r\nexport const ContentContainer = styled.div`\r\n  margin-top: 2rem;\r\n  grid-area: content;\r\n  z-index: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n`;\r\n\r\nexport const GlobalStyle = createGlobalStyle<CustomTheme>`\r\n\r\nhtml, body {\r\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\r\n    /* This webkit setting makes it so there's no flickering when tapping buttons and links on mobile */\r\n    background: ${({ theme }) => theme.background};\r\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 304 304' width='304' height='304'%3E%3Cpath fill='%23245e9f' fill-opacity='0.32' d='M44.1 224a5 5 0 1 1 0 2H0v-2h44.1zm160 48a5 5 0 1 1 0 2H82v-2h122.1zm57.8-46a5 5 0 1 1 0-2H304v2h-42.1zm0 16a5 5 0 1 1 0-2H304v2h-42.1zm6.2-114a5 5 0 1 1 0 2h-86.2a5 5 0 1 1 0-2h86.2zm-256-48a5 5 0 1 1 0 2H0v-2h12.1zm185.8 34a5 5 0 1 1 0-2h86.2a5 5 0 1 1 0 2h-86.2zM258 12.1a5 5 0 1 1-2 0V0h2v12.1zm-64 208a5 5 0 1 1-2 0v-54.2a5 5 0 1 1 2 0v54.2zm48-198.2V80h62v2h-64V21.9a5 5 0 1 1 2 0zm16 16V64h46v2h-48V37.9a5 5 0 1 1 2 0zm-128 96V208h16v12.1a5 5 0 1 1-2 0V210h-16v-76.1a5 5 0 1 1 2 0zm-5.9-21.9a5 5 0 1 1 0 2H114v48H85.9a5 5 0 1 1 0-2H112v-48h12.1zm-6.2 130a5 5 0 1 1 0-2H176v-74.1a5 5 0 1 1 2 0V242h-60.1zm-16-64a5 5 0 1 1 0-2H114v48h10.1a5 5 0 1 1 0 2H112v-48h-10.1zM66 284.1a5 5 0 1 1-2 0V274H50v30h-2v-32h18v12.1zM236.1 176a5 5 0 1 1 0 2H226v94h48v32h-2v-30h-48v-98h12.1zm25.8-30a5 5 0 1 1 0-2H274v44.1a5 5 0 1 1-2 0V146h-10.1zm-64 96a5 5 0 1 1 0-2H208v-80h16v-14h-42.1a5 5 0 1 1 0-2H226v18h-16v80h-12.1zm86.2-210a5 5 0 1 1 0 2H272V0h2v32h10.1zM98 101.9V146H53.9a5 5 0 1 1 0-2H96v-42.1a5 5 0 1 1 2 0zM53.9 34a5 5 0 1 1 0-2H80V0h2v34H53.9zm60.1 3.9V66H82v64H69.9a5 5 0 1 1 0-2H80V64h32V37.9a5 5 0 1 1 2 0zM101.9 82a5 5 0 1 1 0-2H128V37.9a5 5 0 1 1 2 0V82h-28.1zm16-64a5 5 0 1 1 0-2H146v44.1a5 5 0 1 1-2 0V18h-26.1zm102.2 270a5 5 0 1 1 0 2H98v14h-2v-16h124.1zM242 149.9V160h16v34h-16v62h48v48h-2v-46h-48v-66h16v-30h-16v-12.1a5 5 0 1 1 2 0zM53.9 18a5 5 0 1 1 0-2H64V2H48V0h18v18H53.9zm112 32a5 5 0 1 1 0-2H192V0h50v2h-48v48h-28.1zm-48-48a5 5 0 0 1-9.8-2h2.07a3 3 0 1 0 5.66 0H178v34h-18V21.9a5 5 0 1 1 2 0V32h14V2h-58.1zm0 96a5 5 0 1 1 0-2H137l32-32h39V21.9a5 5 0 1 1 2 0V66h-40.17l-32 32H117.9zm28.1 90.1a5 5 0 1 1-2 0v-76.51L175.59 80H224V21.9a5 5 0 1 1 2 0V82h-49.59L146 112.41v75.69zm16 32a5 5 0 1 1-2 0v-99.51L184.59 96H300.1a5 5 0 0 1 3.9-3.9v2.07a3 3 0 0 0 0 5.66v2.07a5 5 0 0 1-3.9-3.9H185.41L162 121.41v98.69zm-144-64a5 5 0 1 1-2 0v-3.51l48-48V48h32V0h2v50H66v55.41l-48 48v2.69zM50 53.9v43.51l-48 48V208h26.1a5 5 0 1 1 0 2H0v-65.41l48-48V53.9a5 5 0 1 1 2 0zm-16 16V89.41l-34 34v-2.82l32-32V69.9a5 5 0 1 1 2 0zM12.1 32a5 5 0 1 1 0 2H9.41L0 43.41V40.6L8.59 32h3.51zm265.8 18a5 5 0 1 1 0-2h18.69l7.41-7.41v2.82L297.41 50H277.9zm-16 160a5 5 0 1 1 0-2H288v-71.41l16-16v2.82l-14 14V210h-28.1zm-208 32a5 5 0 1 1 0-2H64v-22.59L40.59 194H21.9a5 5 0 1 1 0-2H41.41L66 216.59V242H53.9zm150.2 14a5 5 0 1 1 0 2H96v-56.6L56.6 162H37.9a5 5 0 1 1 0-2h19.5L98 200.6V256h106.1zm-150.2 2a5 5 0 1 1 0-2H80v-46.59L48.59 178H21.9a5 5 0 1 1 0-2H49.41L82 208.59V258H53.9zM34 39.8v1.61L9.41 66H0v-2h8.59L32 40.59V0h2v39.8zM2 300.1a5 5 0 0 1 3.9 3.9H3.83A3 3 0 0 0 0 302.17V256h18v48h-2v-46H2v42.1zM34 241v63h-2v-62H0v-2h34v1zM17 18H0v-2h16V0h2v18h-1zm273-2h14v2h-16V0h2v16zm-32 273v15h-2v-14h-14v14h-2v-16h18v1zM0 92.1A5.02 5.02 0 0 1 6 97a5 5 0 0 1-6 4.9v-2.07a3 3 0 1 0 0-5.66V92.1zM80 272h2v32h-2v-32zm37.9 32h-2.07a3 3 0 0 0-5.66 0h-2.07a5 5 0 0 1 9.8 0zM5.9 0A5.02 5.02 0 0 1 0 5.9V3.83A3 3 0 0 0 3.83 0H5.9zm294.2 0h2.07A3 3 0 0 0 304 3.83V5.9a5 5 0 0 1-3.9-5.9zm3.9 300.1v2.07a3 3 0 0 0-1.83 1.83h-2.07a5 5 0 0 1 3.9-3.9zM97 100a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-48 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 48a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 96a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-144a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-96 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm96 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-32 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM49 36a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-32 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM33 68a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-48a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 240a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm80-176a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 48a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm112 176a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM17 180a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM17 84a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6z'%3E%3C/path%3E%3C/svg%3E\");\r\n    color: ${({ theme }) => theme.color};\r\n    /* Font settings */\r\n    font-size: 1.125rem;\r\n    font-family: 'Quicksand', sans-serif;\r\n    font-display: swap;\r\n    font-weight: 400;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n`;\r\n","// Values for locale names\r\nexport enum LocaleNames {\r\n  ENG = 'ENG',\r\n  PL = 'PL',\r\n  JP = 'JP',\r\n}\r\n// Locale interface\r\nexport interface Locale {\r\n  name: LocaleNames;\r\n  navbarHome: string;\r\n  navbarAbout: string;\r\n  navbarContact: string;\r\n  homeH1: string;\r\n  homeH2: string;\r\n  homeDescription: string;\r\n  homePassion: string;\r\n  learnMore: string;\r\n  buttonSend: string;\r\n  contactH1: string;\r\n  contactNameField: string;\r\n  contactEmailField: string;\r\n  contactMessageField: string;\r\n  inputCharactersLeft: string;\r\n  enterName: string;\r\n  invalidEmail: string;\r\n  enterMessage: string;\r\n  sendEmailLoading: string;\r\n  sendEmailSuccess: string;\r\n  sendEmailFailure: string;\r\n  contactMeText: string;\r\n  aboutDescription: string;\r\n  aboutTechnologies: string;\r\n  aboutHobbies: string;\r\n}\r\n\r\n// English locale\r\nexport const locale_ENG: Locale = {\r\n  name: LocaleNames.ENG,\r\n  navbarHome: 'Home',\r\n  navbarAbout: 'About',\r\n  navbarContact: 'Contact',\r\n  homeH1: 'Hey!',\r\n  homeH2: `I'm Krzysztof`,\r\n  homeDescription: `Full stack developer`,\r\n  homePassion: 'WebDev is my passion',\r\n  learnMore: 'About Me',\r\n  buttonSend: 'Submit >',\r\n  contactH1: `Lets talk`,\r\n  contactNameField: `Full name`,\r\n  contactEmailField: `Email`,\r\n  contactMessageField: 'Your message',\r\n  inputCharactersLeft: 'Characters left:  ',\r\n  enterName: 'Please enter your name',\r\n  invalidEmail: 'Invalid email format',\r\n  enterMessage: `Please enter your message`,\r\n  sendEmailLoading: `Sending email...`,\r\n  sendEmailSuccess: 'Email was sent',\r\n  sendEmailFailure: 'Email could not be sent',\r\n  contactMeText: 'Send an email or message me on my social media profiles',\r\n  aboutDescription: `My name is Krzysztof and I'm a full stack developer. When I code, my goal is to create useful and high quality products other people can enjoy. I spend a lot of time on the internet and because of that I know what people want to see. Finding the right balance between user experience and efficiency is a challenge, but I believe I have what it takes to achieve it. Give me a problem and I will find a solution.`,\r\n  aboutTechnologies: `Technologies I use:`,\r\n  aboutHobbies: `In my free time I like to work on improving myself. I believe that staying fit has a huge impact on productivity, so I try to stay in shape. Learning languages is my hobby - knowing a language opens a whole new world and makes you grow as a person. Currently I can speak English and Polish fluently and I'm working on reaching fluency in Japanese.`,\r\n};\r\n// Polish locale\r\nexport const locale_PL: Locale = {\r\n  name: LocaleNames.PL,\r\n  navbarHome: 'Strona Główna',\r\n  navbarAbout: 'O mnie',\r\n  navbarContact: 'Kontakt',\r\n  homeH1: 'Hej!',\r\n  homeH2: 'Jestem Krzysztof',\r\n  homeDescription: 'Full stack developer',\r\n  homePassion: 'WebDev to moja pasja',\r\n  learnMore: 'O Mnie',\r\n  buttonSend: 'Wyślij >',\r\n  contactH1: 'Porozmawiajmy',\r\n  contactNameField: `Imię i nazwisko`,\r\n  contactEmailField: `Email`,\r\n  contactMessageField: `Twoja wiadomość`,\r\n  inputCharactersLeft: `Pozostałe znaki:  `,\r\n  enterName: 'Wprowadź swoje imię i nazwisko',\r\n  invalidEmail: 'Niepoprawny format adresu email',\r\n  enterMessage: 'Wprowadź swoją wiadomość',\r\n  sendEmailLoading: `Wysyłam email...`,\r\n  sendEmailSuccess: 'Email został wysłany',\r\n  sendEmailFailure: 'Nie udało się wysłać emaila',\r\n  contactMeText: 'Wyślij email lub napisz do mnie na jednym z moich profili',\r\n  aboutDescription: `Nazywam się Krzysztof i jestem full stack developerem. Moim celem gdy programuję, jest tworzenie użytecznych i wysokiej jakości produktów, które będą sprawiać ludziom radość. Spędzam dużo czasu w internecie i dlatego wiem, czego oczekują użytkownicy. Uzyskanie odpowiedniego balansu pomiędzy wydajnością a zadowoleniem użytkownika to duże wyzwanie, jednak wierzę, że wiem jak jemu sprostać. Pokaż mi problem, a znajdę rozwiązanie.`,\r\n  aboutTechnologies: `Technologie, których używam:`,\r\n  aboutHobbies: `W wolnym czasie lubię pracować nad sobą. Uważam, że zdrowy tryb życia ma ogromny wpływ na produktywność, więc staram się żyć aktywnie. Moim hobby jest uczenie się języków - gdy poznasz obcy język, otwiera się przed tobą zupełnie nowy świat, co poszerza twoje horyzonty. Obecnie posługuje się biegle językiem angielskim i polskim oraz japońskim w stopniu zaawansowanym.`,\r\n};\r\n// Japanese locale\r\nexport const locale_JP: Locale = {\r\n  name: LocaleNames.JP,\r\n  navbarHome: 'ホーム',\r\n  navbarAbout: '私について',\r\n  navbarContact: 'お問い合わせ',\r\n  homeH1: 'はじめまして！',\r\n  homeH2: `Krzysztofです`,\r\n  homeDescription: `フルスタック開発者`,\r\n  homePassion: 'Web開発は私の情熱です',\r\n  learnMore: '私について',\r\n  buttonSend: '送信 >',\r\n  contactH1: `話しましょう`,\r\n  contactNameField: `お名前`,\r\n  contactEmailField: `メールアドレス`,\r\n  contactMessageField: 'メッセージ本文',\r\n  inputCharactersLeft: '残り文字数:  ',\r\n  enterName: 'お名前を入力してください',\r\n  invalidEmail: '無効なメール形式',\r\n  enterMessage: `メッセージを入力してください`,\r\n  sendEmailLoading: `送信中｡｡｡`,\r\n  sendEmailSuccess: 'メールが送信されました',\r\n  sendEmailFailure: 'メールが送信できませんでした',\r\n  contactMeText: 'メールを送信またはSNSでメッセージしましょう',\r\n  aboutDescription: `Krzysztofです｡ フルスタック開発者｡ なぜソフトウェア開発しますか？ 私の目指しはお役に立てる高品質のソフトウェアをお客様に届けることです｡ オンラインで多くの時間を過ごすのでインターネットユーザーの欲しい物をよく分かります｡ 効率とユーザーエクスペリエンスのバランスを見つけるのは本当に難しいことです｡ でも私はそれをできると信じています｡ 問題があるなら直ぐに解決します｡`,\r\n  aboutTechnologies: `下の技術を使用しています:`,\r\n  aboutHobbies: `空き時間に自分磨きをしています｡ 生産性と健康状態の関連があると思うので健康な生活を送っています｡ 外国語を学ぶことが大好きです｡ 可能性が広がり自分を成長させたりできます｡ 現在英語とポーランド語が話せます｡ 日本語がペラペラになるように頑張っています｡`,\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n// Themes\r\nimport { lightTheme, darkTheme, ThemeNames } from '../../createGlobalStyle';\r\n// Interface defining what props does a theme have\r\n\r\nexport interface ThemeProps {\r\n  name: ThemeNames;\r\n  background: string;\r\n  color: string;\r\n}\r\n\r\ninterface ThemeToggleProps {\r\n  theme: ThemeProps;\r\n}\r\n\r\nexport const initialState: ThemeToggleProps = {\r\n  theme: lightTheme,\r\n};\r\n// Slice\r\nconst themeToggleSlice = createSlice({\r\n  name: `themeToggle`,\r\n  initialState,\r\n  reducers: {\r\n    SET_THEME(state, action: PayloadAction<ThemeNames>) {\r\n      if (action.payload === ThemeNames.DARK) state.theme = darkTheme;\r\n      if (action.payload === ThemeNames.LIGHT) state.theme = lightTheme;\r\n    },\r\n  },\r\n});\r\n// Selectors\r\nexport const themeSelector = (state: RootState) => state.themeToggle.theme;\r\n// Actions and reducer\r\nexport const { SET_THEME } = themeToggleSlice.actions;\r\nexport default themeToggleSlice.reducer;\r\n","import styled, { keyframes } from 'styled-components/macro';\r\nimport { NavLink } from 'react-router-dom';\r\n// Variables\r\nimport {\r\n  black,\r\n  darkBlue,\r\n  lightGray,\r\n  veryDarkBlue,\r\n  lightBlue,\r\n  lightBlueHover,\r\n  veryLightBlue,\r\n  font16px,\r\n  font20px,\r\n} from '../../createGlobalStyle';\r\n\r\n// This animation is needed to avoid flickering\r\nconst MenuFade = keyframes`\r\nfrom {opacity: 0;}\r\n  to {opacity: 1;}\r\n`;\r\n// Icons\r\nexport const MenuIconWrapper = styled.div`\r\n  padding-bottom: 5px;\r\n  :hover {\r\n    color: ${veryLightBlue};\r\n  }\r\n`;\r\n// Logo container\r\nexport const StyledLogo = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  order: 1;\r\n  flex: 1;\r\n  :hover {\r\n    color: ${lightBlueHover};\r\n  }\r\n`;\r\n// Logo text\r\nexport const StyledLogoH1 = styled.h1`\r\n  font-size: ${font20px};\r\n  margin: 10px 10px;\r\n  font-weight: 900;\r\n  color: ${lightBlue};\r\n`;\r\n// Theme toggle cintainer\r\nexport const StyledThemeToggle = styled.div`\r\n  order: 1;\r\n  display: block;\r\n  margin-right: 5px;\r\n`;\r\n// Theme toggle slider\r\nexport const StyledThemeToggleSlider = styled.input`\r\n  /* How this works:\r\n    // The box \r\n    1. You make a checkbox and hide the appeareance of it so the ugly default one goes away\r\n    2. Define the width and height of the box\r\n    3. Do border radius 20px for smooth circle-like edges\r\n    // Circle in the box\r\n    4. Add a :before with content of empty string (important, otherwise it won't work)\r\n    5. Make the position absolute (important!!!!)\r\n    6. Set the height the same as the box and width as half of the box, do border-radius 20px for edges\r\n    7. Do a transform: scale(1.1) to make it slightly bigger than the box\r\n    // Sliding the cricle\r\n    8. Make a :checked:before and do a transform: translateX(the width of box). This will move circle to the other side of the box\r\n  \r\n   */\r\n  cursor: pointer;\r\n  border: 4px solid ${lightBlue};\r\n  width: 60px;\r\n  height: 30px;\r\n  appearance: none; /* hides default checkbox*/\r\n  background: ${veryLightBlue};\r\n  opacity: 0.9;\r\n  border-radius: 20px; /* slider-like edges */\r\n  transition: 0.6s; /* slow translition between toggles */\r\n  :checked {\r\n    background: ${veryDarkBlue};\r\n  }\r\n  /* slider circle */\r\n  :before {\r\n    content: ''; /* needs to be empty */\r\n    /* needs to be absolute*/\r\n    position: absolute;\r\n    opacity: 0, 8;\r\n    margin: -4px; /*if I set a border then I need to add a margin of equal px to circle */\r\n    width: 30px;\r\n    height: 30px;\r\n    background: #30649b;\r\n    border-radius: 50%;\r\n    transform: scale(0.9); /* makes the circle slightly bigger than the rest */\r\n    transition: 0.6s;\r\n  }\r\n  :checked:before {\r\n    transform: scale(0.85) translateX(34px); /* this does the sliding process */\r\n  }\r\n`;\r\n// Language toggle container\r\nexport const StyledLanguage = styled.div`\r\n  order: 2;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n// Language toggle buttons\r\nexport const StyledLanguageButtons = styled.button`\r\n  transform: scale(1.2);\r\n  cursor: pointer;\r\n  :hover {\r\n    transform: scale(1.25, 1.25);\r\n  }\r\n\r\n  :last-of-type {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n/*\r\nProps with custom names in styled-components:\r\nYou need to pass an interface with an object to the component.\r\nExample: \r\n\r\nconst foo = styled.div<{bar: any}>`\r\ncolor: black;\r\n`*/\r\n// Links container\r\nexport const StyledLinks = styled.div<{\r\n  display: string;\r\n}>`\r\n  display: ${(props) => props.display};\r\n\r\n  order: 3;\r\n  width: 100%;\r\n  animation: ${MenuFade} 250ms ease-in-out both;\r\n`;\r\n\r\n// Links\r\n/*\r\nTo make links highlight on active you need to give them a class property  \r\nactiveClassName=\"active\" (can be any name) and then do it like this\r\n\r\n&.${(props) => props.activeClassName} {}\r\n\r\nFor home link e.g (\"/\") you also need to pass exact={true}\r\n*/\r\nexport const StyledLink = styled(NavLink)`\r\n  /* inline components can't have any align properites so this has to be a block*/\r\n  display: block;\r\n  padding: 15px;\r\n  text-decoration: none;\r\n  text-align: center;\r\n  border-top: 1px ridge ${lightGray};\r\n  font-size: ${font16px};\r\n  background: ${darkBlue};\r\n  :hover {\r\n    background: #415a77;\r\n    color: ${veryLightBlue};\r\n  }\r\n  :last-child {\r\n    box-shadow: 0 4px 2px -2px rgba(0, 0, 0, 0.4);\r\n  }\r\n  &.${(props) => props.activeClassName} {\r\n    color: ${black};\r\n    font-weight: 600;\r\n    background: ${lightBlue};\r\n    :hover {\r\n      background: ${lightBlueHover};\r\n    }\r\n  }\r\n`;\r\n\r\n// Link list at width > 768\r\nexport const StyledFlexLinkList = styled.div`\r\n  display: inline-flex;\r\n  order: 1;\r\n  flex: 1;\r\n\r\n  animation: none;\r\n  ${StyledLink} {\r\n    top: 0;\r\n    border: none;\r\n    box-shadow: none;\r\n  }\r\n`;\r\n\r\n// Menu button container\r\nexport const StyledMenu = styled.div`\r\n  order: 2;\r\n`;\r\n// Menu button\r\nexport const StyledMenuButton = styled.button`\r\n  margin-right: 5px;\r\n  cursor: pointer;\r\n`;\r\n/* Navbar\r\nThe logic behind this:\r\n1. On screen width >= 576x this is just a regular flex container with display row - the menu button is hidden (display: none)\r\n2. On screen width < 576 px all the elements you want to hide are set to display: none and the menu button is displayed\r\n3. Menu button toggles display betwen none and block. To achieve the column-like look, the display has to be block AND width: 100% and IMPORTANT - flex-wrep: wrap HAS TO BE SET ON THE NAVBAR OTHERWISE ITEMS WON'T GET PUSHED TO NEW LINE\r\n*/\r\nexport const StyledNavbar = styled.nav`\r\n  grid-area: navbar;\r\n  position: absolute;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n  z-index: 1;\r\n  background: ${darkBlue};\r\n  align-items: center;\r\n  user-select: none;\r\n  button {\r\n    background: none;\r\n    border: none;\r\n  }\r\n  div,\r\n  a {\r\n    color: ${lightGray};\r\n  }\r\n\r\n  /*Those settings are for non-mobile devices. Minimum width to cater for is 320px. */\r\n  @media only screen and (min-width: 768px) {\r\n    ${StyledLogo} {\r\n      flex: 0;\r\n    }\r\n    ${StyledMenu} {\r\n      display: none;\r\n    }\r\n  }\r\n  @media only screen and (max-width: 330px) {\r\n    ${StyledLanguageButtons} {\r\n      padding-right: 2px;\r\n      margin-right: 2px;\r\n      padding-left: 3px;\r\n      transform: scale(1);\r\n      margin: 0px;\r\n      flex: 0;\r\n      :last-of-type {\r\n        margin-right: 0px;\r\n      }\r\n    }\r\n\r\n    ${StyledMenuButton} {\r\n      margin-right: 0px;\r\n      transform: scale(0.9);\r\n    }\r\n\r\n    ${StyledThemeToggle} {\r\n      flex: 0;\r\n      transform: scale(0.9);\r\n      margin: 0px;\r\n      padding: 0px;\r\n    }\r\n  }\r\n`;\r\n","import { FC } from 'react';\r\n// Styling\r\nimport { StyledLogo } from './navbar-styling';\r\n\r\nexport const Logo: FC = () => {\r\n  return (\r\n    <StyledLogo data-testid={'logo'}>\r\n      <img\r\n        src={`${process.env.PUBLIC_URL}/logo.png`}\r\n        alt=\"logo\"\r\n        role=\"button\"\r\n        aria-label=\"logo\"\r\n        width=\"50px\"\r\n        height=\"50px\"\r\n      ></img>\r\n    </StyledLogo>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n// Redux\r\nimport { LocaleNames } from '../../features/localization/locales';\r\n// Components\r\nimport { LanguageButton } from './LanguageButton';\r\n// Styling\r\nimport { StyledLanguage } from './navbar-styling';\r\n\r\nexport enum FlagNames {\r\n  ENG = 'flag_ENG',\r\n  JP = 'flag_JP',\r\n  PL = 'flag_PL',\r\n}\r\n\r\nexport enum AriaLables {\r\n  ENG = 'Switch language to English',\r\n  JP = 'Switch language to Japanese',\r\n  PL = 'Switch language to Polish',\r\n}\r\n\r\nexport const LanguageToggle: FC = (): JSX.Element => {\r\n  return (\r\n    <StyledLanguage data-testid={'languagetoggle'}>\r\n      <LanguageButton\r\n        flagName={FlagNames.ENG}\r\n        aria={AriaLables.ENG}\r\n        localeName={LocaleNames.ENG}\r\n      ></LanguageButton>\r\n      <LanguageButton\r\n        flagName={FlagNames.JP}\r\n        aria={AriaLables.JP}\r\n        localeName={LocaleNames.JP}\r\n      ></LanguageButton>\r\n      <LanguageButton\r\n        flagName={FlagNames.PL}\r\n        aria={AriaLables.PL}\r\n        localeName={LocaleNames.PL}\r\n      ></LanguageButton>\r\n    </StyledLanguage>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport {\r\n  Locale,\r\n  locale_ENG,\r\n  locale_PL,\r\n  LocaleNames,\r\n  locale_JP,\r\n} from './locales';\r\n// Interface for locale properties\r\n\r\nexport interface Localization {\r\n  locale: Locale;\r\n}\r\n\r\nconst initialState: Localization = {\r\n  locale: locale_ENG,\r\n};\r\n// Slice\r\nconst localizationSlice = createSlice({\r\n  name: `localization`,\r\n  initialState,\r\n  reducers: {\r\n    SET_LOCALE(state, action: PayloadAction<LocaleNames>) {\r\n      if (action.payload === LocaleNames.ENG) state.locale = locale_ENG;\r\n      if (action.payload === LocaleNames.PL) state.locale = locale_PL;\r\n      if (action.payload === LocaleNames.JP) state.locale = locale_JP;\r\n    },\r\n  },\r\n});\r\n// Selectors\r\nexport const localizationSelector = (state: RootState) =>\r\n  state.localization.locale;\r\n// Actions and reducer\r\nexport const { SET_LOCALE } = localizationSlice.actions;\r\nexport default localizationSlice.reducer;\r\n","import { FC, useRef, useEffect, Dispatch, SetStateAction } from 'react';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport { localizationSelector } from '../../features/localization/localizationSlice';\r\nimport { Locale } from '../../features/localization/locales';\r\n// Components\r\nimport { MenuDisplay } from './Navbar';\r\n// Styling\r\nimport { StyledLinks, StyledLink } from './navbar-styling';\r\n// Variables\r\nimport { home, about, contact } from '../../App';\r\n\r\nexport interface LinkListProps {\r\n  display: MenuDisplay;\r\n  setDisplay: Dispatch<SetStateAction<MenuDisplay>>;\r\n}\r\n\r\nexport const LinkList: FC<LinkListProps> = ({\r\n  display,\r\n  setDisplay,\r\n}): JSX.Element => {\r\n  const localization: Locale = useSelector(localizationSelector);\r\n  const { navbarAbout, navbarContact, navbarHome } = localization;\r\n\r\n  /* My previous method of closing menu on clicking away had a big drawback - rapid clicking links wouldn't work. \r\n    So now I add a reference to the dropdown menu container and an event listener to document. If ref.current doesn't contain the component then close the menu.\r\n  */\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', clickAway);\r\n  });\r\n  // Ref is for handling the dropdown collapsing\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const clickAway = (e: MouseEvent): void => {\r\n    if (display === MenuDisplay.NONE) return;\r\n    if (ref.current && !ref.current.contains(e.target as Node))\r\n      setDisplay(MenuDisplay.NONE);\r\n\r\n    return document.removeEventListener('mousedown', clickAway);\r\n  };\r\n  // Need this so menu gets closed after redirecting\r\n  const closeMenuWhenRedirected = (): void => {\r\n    if (display === MenuDisplay.BLOCK) setDisplay(MenuDisplay.NONE);\r\n  };\r\n\r\n  return (\r\n    <StyledLinks display={display} ref={ref} data-testid={'linklist'}>\r\n      <StyledLink\r\n        to={home}\r\n        exact={true}\r\n        activeClassName=\"active\"\r\n        onClick={closeMenuWhenRedirected}\r\n        aria-label={home}\r\n        data-testid={'homelink'}\r\n      >\r\n        {navbarHome}\r\n      </StyledLink>\r\n      <StyledLink\r\n        to={about}\r\n        activeClassName=\"active\"\r\n        onClick={closeMenuWhenRedirected}\r\n        aria-label={about}\r\n      >\r\n        {navbarAbout}\r\n      </StyledLink>\r\n      <StyledLink\r\n        to={contact}\r\n        activeClassName=\"active\"\r\n        onClick={closeMenuWhenRedirected}\r\n        aria-label={contact}\r\n      >\r\n        {navbarContact}\r\n      </StyledLink>\r\n    </StyledLinks>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport { localizationSelector } from '../../features/localization/localizationSlice';\r\nimport { Locale } from '../../features/localization/locales';\r\n// Styling\r\nimport { StyledFlexLinkList, StyledLink } from './navbar-styling';\r\n// Variables\r\nimport { home, about, contact } from '../../App';\r\n\r\nexport const FlexLinkList: FC = (): JSX.Element => {\r\n  const localization: Locale = useSelector(localizationSelector);\r\n  const { navbarAbout, navbarContact, navbarHome } = localization;\r\n\r\n  return (\r\n    <StyledFlexLinkList data-testid={'flexlinklist'}>\r\n      <StyledLink\r\n        to={home}\r\n        exact={true}\r\n        activeClassName=\"active\"\r\n        aria-label={home}\r\n        data-testid={'flexhomelink'}\r\n      >\r\n        {navbarHome}\r\n      </StyledLink>\r\n      <StyledLink to={about} activeClassName=\"active\" aria-label={about}>\r\n        {navbarAbout}\r\n      </StyledLink>\r\n      <StyledLink to={contact} activeClassName=\"active\" aria-label={contact}>\r\n        {navbarContact}\r\n      </StyledLink>\r\n    </StyledFlexLinkList>\r\n  );\r\n};\r\n","import { FC, MouseEvent } from 'react';\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  SET_THEME,\r\n  themeSelector,\r\n  ThemeProps,\r\n} from '../../features/themetoggle/themeToggleSlice';\r\n// Styling\r\nimport { StyledThemeToggle, StyledThemeToggleSlider } from './navbar-styling';\r\nimport { ThemeNames } from '../../createGlobalStyle';\r\n\r\nexport const ThemeToggle: FC = () => {\r\n  const theme: ThemeProps = useSelector(themeSelector);\r\n  const { name } = theme;\r\n  const dispatch = useDispatch();\r\n\r\n  const themeToggler = (e: MouseEvent<HTMLInputElement>): void => {\r\n    const isChecked: boolean = e.currentTarget.checked;\r\n    if (isChecked === true) dispatch(SET_THEME(ThemeNames.DARK));\r\n    if (isChecked === false) dispatch(SET_THEME(ThemeNames.LIGHT));\r\n  };\r\n\r\n  // This toggle check is needed so everything works properly with redux persist - IMPORTANT: has to defaultChecked NOT checked\r\n  return (\r\n    <StyledThemeToggle>\r\n      {name === ThemeNames.LIGHT ? (\r\n        <StyledThemeToggleSlider\r\n          data-testid={'themetoggle'}\r\n          type=\"checkbox\"\r\n          aria-label=\"Theme toggle\"\r\n          onClick={themeToggler}\r\n        ></StyledThemeToggleSlider>\r\n      ) : (\r\n        <StyledThemeToggleSlider\r\n          data-testid={'themetoggle'}\r\n          defaultChecked\r\n          type=\"checkbox\"\r\n          aria-label=\"Theme toggle\"\r\n          onClick={themeToggler}\r\n        ></StyledThemeToggleSlider>\r\n      )}\r\n    </StyledThemeToggle>\r\n  );\r\n};\r\n","import { FC, MouseEvent } from 'react';\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  localizationSelector,\r\n  SET_LOCALE,\r\n} from '../../features/localization/localizationSlice';\r\nimport { LocaleNames, Locale } from '../../features/localization/locales';\r\n// Styling\r\nimport { StyledLanguageButtons } from './navbar-styling';\r\n\r\ninterface LanguageButtonProps {\r\n  localeName: LocaleNames;\r\n  flagName: string;\r\n  aria: string;\r\n}\r\n\r\nexport const LanguageButton: FC<LanguageButtonProps> = ({\r\n  localeName,\r\n  flagName,\r\n  aria,\r\n}): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  const localization: Locale = useSelector(localizationSelector);\r\n  // Thanks to currying I can pass a value in onClick\r\n  const localizationHandler =\r\n    (language: LocaleNames) =>\r\n    (e: MouseEvent<HTMLButtonElement>): void => {\r\n      e.preventDefault();\r\n      const newLocale: LocaleNames = language as LocaleNames;\r\n      // This timeout here is needed because of how I implemented collapsing dropdown menu ( refer to clickAway method in MenuButton.tsx ) Without the timeout, the links in dropdown menu would get their names changed before the menu collapses, leading to a weird flash.\r\n      if (localization.name !== newLocale)\r\n        setTimeout(() => {\r\n          dispatch(SET_LOCALE(newLocale));\r\n        }, 101);\r\n    };\r\n\r\n  return (\r\n    <StyledLanguageButtons\r\n      onClick={localizationHandler(localeName)}\r\n      data-testid={'languagetogglebutton'}\r\n    >\r\n      <img\r\n        src={`${process.env.PUBLIC_URL}/${flagName}.png`}\r\n        alt={flagName}\r\n        role=\"button\"\r\n        aria-label={aria}\r\n        width=\"32px\"\r\n        height=\"32px\"\r\n      ></img>\r\n    </StyledLanguageButtons>\r\n  );\r\n};\r\n","import { FC, useState, useEffect } from 'react';\r\n// Components\r\nimport { Logo } from './Logo';\r\nimport { LinkList } from './LinkList';\r\nimport { FlexLinkList } from './FlexLinkList';\r\nimport { ThemeToggle } from './ThemeToggle';\r\nimport { LanguageToggle } from './LanguageToggle';\r\nimport { MenuButton } from './MenuButton';\r\n// Styling\r\nimport { StyledNavbar } from './navbar-styling';\r\n\r\nexport enum MenuDisplay {\r\n  NONE = 'none',\r\n  BLOCK = 'block',\r\n}\r\n\r\nexport const Navbar: FC = (): JSX.Element => {\r\n  const [display, setDisplay] = useState<MenuDisplay>(MenuDisplay.NONE);\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    const handleResizeWindow = () => setWidth(window.innerWidth);\r\n\r\n    window.addEventListener('resize', handleResizeWindow);\r\n    return () => {\r\n      window.removeEventListener('resize', handleResizeWindow);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <StyledNavbar data-testid={'navbar'}>\r\n      <Logo />\r\n      {width > 768 ? (\r\n        <FlexLinkList />\r\n      ) : (\r\n        <LinkList display={display} setDisplay={setDisplay} />\r\n      )}\r\n      <ThemeToggle />\r\n      <LanguageToggle />\r\n      <MenuButton display={display} setDisplay={setDisplay} />\r\n    </StyledNavbar>\r\n  );\r\n};\r\n","import { FC, useEffect, KeyboardEvent, Dispatch, SetStateAction } from 'react';\r\n// Components\r\nimport { MenuDisplay } from './Navbar';\r\n// Styling\r\nimport {\r\n  StyledMenuButton,\r\n  StyledMenu,\r\n  MenuIconWrapper,\r\n} from './navbar-styling';\r\nimport { bigIcon } from '../../createGlobalStyle';\r\nimport { Bars, Times } from '@styled-icons/fa-solid';\r\n\r\n/* How to useRef with TypeScript\r\nconst inputRef = useRef<HTMLDivElement>(null);\r\nif (inputRef && inputRef.current) {\r\n   console.log(inputRef.current.offsetTop);\r\n}\r\n*/\r\ninterface MenuButtonProps {\r\n  display: MenuDisplay;\r\n  setDisplay: Dispatch<SetStateAction<MenuDisplay>>;\r\n}\r\n\r\nexport const MenuButton: FC<MenuButtonProps> = ({\r\n  display,\r\n  setDisplay,\r\n}): JSX.Element | null => {\r\n  useEffect(() => {\r\n    if (display === MenuDisplay.BLOCK)\r\n      // Collapse dropdown on scroll, adding onScroll to a component won't work because I need to check the body, not the component itself, so I need to add an event listener\r\n      return document.addEventListener('scroll', scrollAway, { once: true });\r\n  });\r\n\r\n  // Toggling visibility of dropdown menu\r\n  const clickHandler = (): void => {\r\n    if (display === MenuDisplay.NONE) setDisplay(MenuDisplay.BLOCK);\r\n    else setDisplay(MenuDisplay.NONE);\r\n  };\r\n\r\n  // I need to return document.removeEventListener('scroll', scrollAway); for all the other closing methods to stop this triggering if menu has been already closed\r\n  const scrollAway = (): void => {\r\n    setDisplay(MenuDisplay.NONE);\r\n  };\r\n\r\n  // Esc key handler\r\n  const pressEsc = (e: KeyboardEvent<HTMLButtonElement>): void => {\r\n    e.preventDefault(); // has to be done or otherwise space would trigger the button\r\n    if (e.key === `Escape`) {\r\n      setDisplay(MenuDisplay.NONE);\r\n    }\r\n\r\n    return document.removeEventListener('scroll', scrollAway);\r\n  };\r\n\r\n  // Both of those icons need to be same size otherwise there will be weird clipping\r\n\r\n  return (\r\n    <StyledMenu>\r\n      <StyledMenuButton\r\n        onClick={clickHandler}\r\n        onKeyDown={(e: KeyboardEvent<HTMLButtonElement>) => pressEsc(e)}\r\n        data-testid={'menubutton'}\r\n      >\r\n        {display === MenuDisplay.NONE ? (\r\n          <MenuIconWrapper>\r\n            <Bars\r\n              size={bigIcon}\r\n              title=\"Open menu\"\r\n              aria-label=\"Open menu\"\r\n              data-testid={'openmenu'}\r\n            />\r\n          </MenuIconWrapper>\r\n        ) : (\r\n          <MenuIconWrapper>\r\n            <Times\r\n              size={bigIcon}\r\n              title=\"Close menu\"\r\n              aria-label=\"Close menu\"\r\n              data-testid={'closemenu'}\r\n            />\r\n          </MenuIconWrapper>\r\n        )}\r\n      </StyledMenuButton>\r\n    </StyledMenu>\r\n  );\r\n};\r\n","import { FC, useState, FormEvent } from 'react';\r\nimport emailjs, { EmailJSResponseStatus } from 'emailjs-com';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport { localizationSelector } from '../../features/localization/localizationSlice';\r\nimport { Locale } from '../../features/localization/locales';\r\n// Components\r\nimport { EmailSentNotification } from './EmailSentNotification';\r\n// Utils\r\nimport { regexCheck } from '../../utils/regexEmail';\r\n// Styling\r\nimport {\r\n  StyledLabel,\r\n  StyledTextArea,\r\n  StyledInput,\r\n  StyledForm,\r\n  StyledCharactersLeft,\r\n  StyledFormElement,\r\n  StyledNotificationWarning,\r\n  StyledSubmitButton,\r\n  StyledButtonContainer,\r\n} from './contact-styling';\r\n\r\n// Warning visibility\r\nexport enum WarningVisibility {\r\n  SHOW = 1,\r\n  HIDDEN = 0,\r\n}\r\n// Field border\r\nenum FieldBorderStyle {\r\n  DEFAULT = '#86B7FE',\r\n  SUCCESS = '#198754',\r\n  FAILURE = '#DC3545',\r\n}\r\n// Field box shadow\r\nenum FieldShadowStyle {\r\n  DEFAULT = '#C2DBFE',\r\n  SUCCESS = '#C5E1D4',\r\n  FAILURE = '#F6CCD0',\r\n}\r\n\r\n// Input fields\r\nenum FieldNames {\r\n  NAME = 'name',\r\n  EMAIL = 'email',\r\n  MESSAGE = 'message',\r\n}\r\n// Button styles\r\nexport enum EmailSendingStyle {\r\n  LOADING = 'LOADING',\r\n  SUCCESS = 'SUCCESS',\r\n  FAILURE = 'FAILURE',\r\n}\r\n\r\n// Emailjs settings\r\nconst serviceID: string = `${process.env.REACT_APP_EMAILJS_SERVICEID}`;\r\nconst templateID: string = `${process.env.REACT_APP_EMAILJS_TEMPLATEID}`;\r\nconst userID: string = `${process.env.REACT_APP_EMAILJS_USERID}`;\r\n\r\nexport const ContactForm: FC = (): JSX.Element => {\r\n  /* FORM SETTINGS */\r\n\r\n  // Form id\r\n  const formId: string = 'contact';\r\n  // Text area max rows\r\n  const maxRows: number = 5;\r\n  // Max textarea character length\r\n  const messageMaxLength: number = 256;\r\n\r\n  /* LOCALIZATION */\r\n  const localization: Locale = useSelector(localizationSelector);\r\n  const {\r\n    contactNameField,\r\n    contactEmailField,\r\n    contactMessageField,\r\n    inputCharactersLeft,\r\n    enterName,\r\n    invalidEmail,\r\n    enterMessage,\r\n    buttonSend,\r\n  } = localization;\r\n\r\n  /*                                  STATES                                        */\r\n\r\n  /* \r\n      NAME FIELD  \r\n  */\r\n\r\n  // State of input\r\n  const [name, setName] = useState<string>(``);\r\n  // Check whether to display warning or not\r\n  const [nameWarning, setNameWarning] = useState<WarningVisibility>(\r\n    WarningVisibility.HIDDEN\r\n  );\r\n  // Setting border for name field\r\n  const [nameBorder, setNameBorder] = useState<FieldBorderStyle>(\r\n    FieldBorderStyle.DEFAULT\r\n  );\r\n  // Setting box shadow for name field\r\n  const [nameShadow, setNameShadow] = useState<FieldShadowStyle>(\r\n    FieldShadowStyle.DEFAULT\r\n  );\r\n\r\n  /* \r\n      EMAIL FIELD  \r\n  */\r\n\r\n  // State of input\r\n  const [email, setEmail] = useState<string>(``);\r\n  // Check if email is empty\r\n  const [emailWarning, setEmailWarning] = useState<WarningVisibility>(\r\n    WarningVisibility.HIDDEN\r\n  );\r\n  // Setting border for email field\r\n  const [emailBorder, setEmailBorder] = useState<FieldBorderStyle>(\r\n    FieldBorderStyle.DEFAULT\r\n  );\r\n  // Setting box shadow for email field\r\n  const [emailShadow, setEmailShadow] = useState<FieldShadowStyle>(\r\n    FieldShadowStyle.DEFAULT\r\n  );\r\n\r\n  /* \r\n      MESSAGE FIELD  \r\n  */\r\n\r\n  // State of input\r\n  const [message, setMessage] = useState<string>('');\r\n  // Check if message is empty\r\n  const [messageWarning, setMessageWarning] = useState<WarningVisibility>(\r\n    WarningVisibility.HIDDEN\r\n  );\r\n  // Setting border for message field\r\n  const [messageBorder, setMessageBorder] = useState<FieldBorderStyle>(\r\n    FieldBorderStyle.DEFAULT\r\n  );\r\n  // Setting box shadow for message field\r\n  const [messageShadow, setMessageShadow] = useState<FieldShadowStyle>(\r\n    FieldShadowStyle.DEFAULT\r\n  );\r\n  // Display characters left in text area\r\n  const [charactersLeft, setcharactersLeft] =\r\n    useState<number>(messageMaxLength);\r\n\r\n  // Email was sent\r\n  const [isEmailSent, setIsEmailSent] = useState<EmailSendingStyle | string>(\r\n    ''\r\n  );\r\n\r\n  /* UTILS */\r\n\r\n  // Resetting form fields\r\n  const resetForm = (): void => {\r\n    setName('');\r\n    setEmail('');\r\n    setMessage('');\r\n    setcharactersLeft(messageMaxLength);\r\n    setNameBorder(FieldBorderStyle.DEFAULT);\r\n    setNameShadow(FieldShadowStyle.DEFAULT);\r\n    setEmailBorder(FieldBorderStyle.DEFAULT);\r\n    setEmailShadow(FieldShadowStyle.DEFAULT);\r\n    setMessageBorder(FieldBorderStyle.DEFAULT);\r\n    setMessageShadow(FieldShadowStyle.DEFAULT);\r\n  };\r\n  // Resetting warnings\r\n  const resetWarnings = (): void => {\r\n    setNameWarning(WarningVisibility.HIDDEN);\r\n    setEmailWarning(WarningVisibility.HIDDEN);\r\n    setMessageWarning(WarningVisibility.HIDDEN);\r\n  };\r\n\r\n  /* FORM METHODS */\r\n\r\n  // On change\r\n  const onChange = (\r\n    e: FormEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ): void => {\r\n    const targetValue: string = e.currentTarget.value;\r\n    const targetName: string = e.currentTarget.name;\r\n    // Assigning values to respective states\r\n    if (targetName === FieldNames.NAME) {\r\n      setName(targetValue);\r\n      if (targetValue === '') {\r\n        setNameWarning(WarningVisibility.SHOW);\r\n        setNameBorder(FieldBorderStyle.FAILURE);\r\n        setNameShadow(FieldShadowStyle.FAILURE);\r\n      } else {\r\n        setNameWarning(WarningVisibility.HIDDEN);\r\n        setNameBorder(FieldBorderStyle.SUCCESS);\r\n        setNameShadow(FieldShadowStyle.SUCCESS);\r\n      }\r\n    }\r\n    if (targetName === FieldNames.EMAIL) {\r\n      setEmail(targetValue);\r\n      if (regexCheck(targetValue) === false) {\r\n        setEmailWarning(WarningVisibility.SHOW);\r\n        setEmailBorder(FieldBorderStyle.FAILURE);\r\n        setEmailShadow(FieldShadowStyle.FAILURE);\r\n      } else {\r\n        setEmailWarning(WarningVisibility.HIDDEN);\r\n        setEmailBorder(FieldBorderStyle.SUCCESS);\r\n        setEmailShadow(FieldShadowStyle.SUCCESS);\r\n      }\r\n    }\r\n    if (targetName === FieldNames.MESSAGE) {\r\n      // IMPORTANT: Make sure im doing the math for characters left on e.currentTarget.value, NOT state\r\n      setcharactersLeft(messageMaxLength - targetValue.length);\r\n      setMessage(targetValue);\r\n      if (targetValue === '') {\r\n        setMessageWarning(WarningVisibility.SHOW);\r\n        setMessageBorder(FieldBorderStyle.FAILURE);\r\n        setMessageShadow(FieldShadowStyle.FAILURE);\r\n      } else {\r\n        setMessageWarning(WarningVisibility.HIDDEN);\r\n        setMessageBorder(FieldBorderStyle.SUCCESS);\r\n        setMessageShadow(FieldShadowStyle.SUCCESS);\r\n      }\r\n    }\r\n  };\r\n\r\n  // On submit\r\n  const onSubmit = async (e: FormEvent<HTMLFormElement>): Promise<void> => {\r\n    e.preventDefault();\r\n    /* VALIDATING FIELDS \r\n      name, email and message are states of fields (so e.currentTarget.value from onChange)\r\n    */\r\n\r\n    // Validating name field\r\n    if (name !== '') setName(name);\r\n    else setNameWarning(WarningVisibility.SHOW);\r\n\r\n    // Valdiating email field\r\n    const emailValidation = regexCheck(email);\r\n    if (emailValidation === true) setEmail(email);\r\n    else setEmailWarning(WarningVisibility.SHOW);\r\n\r\n    // Validating message field\r\n    if (message !== '') setMessage(message);\r\n    else setMessageWarning(WarningVisibility.SHOW);\r\n\r\n    // If all fields are valid then change the button style to loading, reset all fields, try to send email then let user know if email was sent by changing the button style and displaying a notificiations\r\n    if (name !== '' && emailValidation === true && message !== '') {\r\n      // Set email notificaiton to loading for when the POST request is processing\r\n\r\n      setIsEmailSent(EmailSendingStyle.LOADING);\r\n      // Checking if email was sent\r\n      const res: EmailJSResponseStatus = await emailjs.send(\r\n        serviceID,\r\n        templateID,\r\n        { name, email, message },\r\n        userID\r\n      );\r\n      if (res?.status === 200) {\r\n        setIsEmailSent(EmailSendingStyle.SUCCESS);\r\n        // Resetting form state and hiding notifications\r\n        resetForm();\r\n        resetWarnings();\r\n      } else {\r\n        setIsEmailSent(EmailSendingStyle.FAILURE);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onSubmit} id={formId} data-testid={'contactform'}>\r\n      <StyledFormElement>\r\n        <StyledLabel htmlFor={FieldNames.NAME}>{contactNameField}</StyledLabel>\r\n        <StyledInput\r\n          shadow={nameShadow}\r\n          border={nameBorder}\r\n          type=\"text\"\r\n          onChange={onChange}\r\n          name={FieldNames.NAME}\r\n          value={name}\r\n          placeholder={contactNameField}\r\n          data-testid={'contactformname'}\r\n        ></StyledInput>\r\n        <StyledNotificationWarning visibility={nameWarning}>\r\n          {enterName}\r\n        </StyledNotificationWarning>\r\n      </StyledFormElement>\r\n      <StyledFormElement>\r\n        <StyledLabel htmlFor={FieldNames.EMAIL}>\r\n          {contactEmailField}\r\n        </StyledLabel>\r\n        <StyledInput\r\n          shadow={emailShadow}\r\n          border={emailBorder}\r\n          type=\"email\"\r\n          onChange={onChange}\r\n          name={FieldNames.EMAIL}\r\n          value={email}\r\n          placeholder={contactEmailField}\r\n          data-testid={'contactformemail'}\r\n        ></StyledInput>\r\n        <StyledNotificationWarning visibility={emailWarning}>\r\n          {invalidEmail}\r\n        </StyledNotificationWarning>\r\n      </StyledFormElement>\r\n      <StyledFormElement>\r\n        <StyledLabel htmlFor={FieldNames.MESSAGE}>\r\n          {contactMessageField}\r\n        </StyledLabel>\r\n        <StyledTextArea\r\n          shadow={messageShadow}\r\n          border={messageBorder}\r\n          rows={maxRows}\r\n          maxLength={messageMaxLength}\r\n          onChange={onChange}\r\n          name={FieldNames.MESSAGE}\r\n          value={message}\r\n          placeholder={contactMessageField}\r\n          data-testid={'contactformemessage'}\r\n        ></StyledTextArea>\r\n        <StyledNotificationWarning visibility={messageWarning}>\r\n          {enterMessage}\r\n        </StyledNotificationWarning>\r\n        <StyledCharactersLeft>\r\n          {inputCharactersLeft}\r\n          {charactersLeft}\r\n        </StyledCharactersLeft>\r\n      </StyledFormElement>\r\n      <StyledButtonContainer>\r\n        <StyledSubmitButton\r\n          type=\"submit\"\r\n          form={formId}\r\n          aria-label=\"Submit form\"\r\n        >\r\n          {buttonSend}\r\n        </StyledSubmitButton>\r\n        <EmailSentNotification\r\n          isEmailSent={isEmailSent}\r\n        ></EmailSentNotification>\r\n      </StyledButtonContainer>\r\n    </StyledForm>\r\n  );\r\n};\r\n","import styled from 'styled-components/macro';\r\n// Variables\r\nimport {\r\n  black,\r\n  darkBlue,\r\n  lightGray,\r\n  lightBlue,\r\n  veryLightBlue,\r\n  font10px,\r\n} from '../../createGlobalStyle';\r\n\r\n// Links\r\nexport const StyledContactLink = styled.a`\r\n  color: ${lightGray};\r\n  margin-right: 5px;\r\n  padding-right: 5px;\r\n  :hover {\r\n    color: ${veryLightBlue};\r\n  }\r\n`;\r\n\r\n// Icons\r\nexport const FooterIconWrapper = styled.div`\r\n  padding: 0 5px 5px 5px;\r\n`;\r\n// Copyright\r\nexport const StyledCopyright = styled.div`\r\n  color: ${black};\r\n  font-size: calc(6px + 1vh);\r\n  background: ${lightBlue};\r\n  width: 100%;\r\n  line-height: 0.1;\r\n`;\r\n// Social media links\r\nexport const StyledContactList = styled.div`\r\n  display: inline;\r\n  line-height: 0.1;\r\n  p {\r\n    font-size: ${font10px};\r\n    :after {\r\n      content: ':';\r\n    }\r\n  }\r\n`;\r\n// Footer\r\nexport const StyledFooter = styled.footer`\r\n  grid-area: footer;\r\n  display: flex;\r\n  text-align: center;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  opacity: 0.9;\r\n  background: ${darkBlue};\r\n  box-shadow: 0px 0px 0px 2px rgba(0, 0, 0, 0.4);\r\n  color: ${lightGray};\r\n  user-select: none;\r\n  @media only screen and (max-width: 280px) {\r\n    ${StyledContactList} {\r\n      padding: 0px;\r\n    }\r\n  }\r\n`;\r\n","import { FC } from 'react';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport { localizationSelector } from '../../features/localization/localizationSlice';\r\nimport { Locale } from '../../features/localization/locales';\r\n// Styling\r\nimport { Envelope } from '@styled-icons/fa-regular/';\r\nimport { Github } from '@styled-icons/fa-brands';\r\nimport { Linkedin, Twitter, Facebook } from '@styled-icons/bootstrap';\r\nimport {\r\n  FooterIconWrapper,\r\n  StyledContactList,\r\n  StyledContactLink,\r\n} from './footer-styling';\r\nimport { smallIcon } from '../../createGlobalStyle';\r\n\r\nexport const ContactLinks: FC = (): JSX.Element => {\r\n  const localization: Locale = useSelector(localizationSelector);\r\n\r\n  const { navbarContact } = localization;\r\n\r\n  const github: string = `${process.env.REACT_APP_GITHUB}`;\r\n  const myEmail: string = `${process.env.REACT_APP_EMAIL}`;\r\n  const linkedin: string = `${process.env.REACT_APP_LINKEDIN}`;\r\n  const twitter: string = `${process.env.REACT_APP_TWITTER}`;\r\n  const facebook: string = `${process.env.REACT_APP_FACEBOOK}`;\r\n\r\n  // Can't use <Link> with external links\r\n  return (\r\n    <StyledContactList data-testid={'footercontact'}>\r\n      <p data-testid={'footercontacttext'}>{navbarContact}</p>\r\n      <FooterIconWrapper>\r\n        <StyledContactLink href={github} target=\"_blank\" rel=\"noopener\">\r\n          <Github size={smallIcon} title=\"GitHub\" />\r\n        </StyledContactLink>\r\n        <StyledContactLink href={linkedin} target=\"_blank\" rel=\"noopener\">\r\n          <Linkedin size={smallIcon} title=\"LinkedIn\"></Linkedin>\r\n        </StyledContactLink>\r\n\r\n        <StyledContactLink href={twitter} target=\"_blank\" rel=\"noopener\">\r\n          <Twitter size={smallIcon} title=\"Twitter\"></Twitter>\r\n        </StyledContactLink>\r\n\r\n        <StyledContactLink href={facebook} target=\"_blank\" rel=\"noopener\">\r\n          <Facebook size={smallIcon} title=\"Facebook\"></Facebook>\r\n        </StyledContactLink>\r\n\r\n        <StyledContactLink href={`mailto:${myEmail}`}>\r\n          <Envelope size={smallIcon} title=\"Email Address\" />\r\n        </StyledContactLink>\r\n      </FooterIconWrapper>\r\n    </StyledContactList>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n// Styling\r\nimport { StyledCopyright } from './footer-styling';\r\n\r\nexport const Copyright: FC = () => {\r\n  const yearNow: number = new Date().getFullYear();\r\n  const myName: string = `${process.env.REACT_APP_REAL_NAME}`;\r\n\r\n  return (\r\n    <StyledCopyright data-testid={'copyright'}>\r\n      <p data-testid={'copyrighttext'}>\r\n        © {yearNow} {myName}\r\n      </p>\r\n    </StyledCopyright>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n// Components\r\nimport { ContactLinks } from './ContactLinks';\r\nimport { Copyright } from './Copyright';\r\n// Styling\r\nimport { StyledFooter } from './footer-styling';\r\n\r\nexport const Footer: FC = (): JSX.Element => {\r\n  return (\r\n    <StyledFooter data-testid={'footer'}>\r\n      <ContactLinks />\r\n      <Copyright />\r\n    </StyledFooter>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n// Variables\r\nimport { lightBlue, font12px, font16px } from '../../createGlobalStyle';\r\n\r\n// Main container\r\nexport const StyledAboutContainer = styled.main`\r\n  z-index: 0;\r\n  margin-top: 6.5vh;\r\n  margin-bottom: 6vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\n// Picture container\r\nexport const StyledPictureContainer = styled.div`\r\n  order: 1;\r\n  display: flex;\r\n\r\n  align-items: center;\r\n  flex-wrap: nowrap;\r\n`;\r\n// Picture\r\nexport const StyledPicture = styled.img`\r\n  width: 350px;\r\n  height: 350px;\r\n  border-radius: 25px;\r\n  border: 5px solid ${lightBlue};\r\n  order: 1;\r\n\r\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 14px 15px,\r\n    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\r\n    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\r\n`;\r\n\r\n// Text container\r\nexport const StyledTextContainer = styled.div<{ background: string }>`\r\n  width: 50%;\r\n  margin-right: 5vh;\r\n  font-weight: 900;\r\n  font-size: ${font12px};\r\n\r\n  p {\r\n    background: ${(props) => props.background};\r\n    border: 5px dashed ${lightBlue};\r\n    padding: 2vh;\r\n    box-shadow: rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px,\r\n      rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px,\r\n      rgba(0, 0, 0, 0.09) 0px 32px 16px;\r\n  }\r\n\r\n  p:last-of-type {\r\n    margin-top: 5vh;\r\n  }\r\n`;\r\n// Text + picture container\r\nexport const StyledAboutWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  order: 2;\r\n\r\n  @media only screen and (max-height: 500px) {\r\n    ${StyledTextContainer} {\r\n      p:last-of-type {\r\n        margin-top: 2rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 1250px) {\r\n    ${StyledTextContainer} {\r\n      width: 80%;\r\n      order: 2;\r\n      text-align: center;\r\n      margin-right: 0;\r\n      margin-top: 2vh;\r\n    }\r\n\r\n    ${StyledPictureContainer} {\r\n      margin-top: 20px;\r\n    }\r\n\r\n    ${StyledPicture} {\r\n      border-radius: 50%;\r\n      width: 255px;\r\n      height: 255px;\r\n    }\r\n  }\r\n`;\r\n\r\n// Text + icons  main container\r\nexport const StyledTechnologyContainer = styled.div`\r\n  margin-top: 5vh;\r\n  text-align: center;\r\n  order: 3;\r\n  padding: 1vh;\r\n  font-size: ${font16px};\r\n  font-weight: 500;\r\n  text-shadow: 1px 1px #4d96bb;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\n// Text + icons centered container\r\nexport const StyledTechnologyWrapper = styled.div<{ background: string }>`\r\n  background: ${(props) => props.background};\r\n  border: 5px dashed ${lightBlue};\r\n  padding: 0.5vh 3vh 2vh 3vh;\r\n  box-shadow: rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px,\r\n    rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px,\r\n    rgba(0, 0, 0, 0.09) 0px 32px 16px;\r\n  p {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\n// Icon wrapper\r\nexport const StyledTechnologyIconWrapper = styled.div`\r\n  display: inline-flex;\r\n  text-align: center;\r\n`;\r\n\r\n// Icon container\r\nexport const StyledTechnologyIcon = styled.div`\r\n  padding: 2px;\r\n`;\r\n","import { FC } from 'react';\r\n// Styling\r\nimport { StyledPicture, StyledPictureContainer } from './about-styling';\r\n\r\nexport const Picture: FC = () => {\r\n  const picture: string = 'profile_pic';\r\n  return (\r\n    <StyledPictureContainer data-testid={'aboutpicture'}>\r\n      <StyledPicture\r\n        alt=\"Profile\"\r\n        src={`${process.env.PUBLIC_URL}/${picture}.jpg`}\r\n      ></StyledPicture>\r\n    </StyledPictureContainer>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n// Styling\r\nimport {\r\n  StyledTechnologyIcon,\r\n  StyledTechnologyIconWrapper,\r\n} from './about-styling';\r\nimport { ReactLogo, NodeJs } from '@styled-icons/fa-brands';\r\nimport { Redux } from '@styled-icons/boxicons-logos';\r\nimport { Typescript, Mongodb, Postgresql } from '@styled-icons/simple-icons';\r\nimport { Docker } from '@styled-icons/simple-icons';\r\nimport { mediumIcon } from '../../createGlobalStyle';\r\n\r\nexport const TechnologyIcons: FC = () => {\r\n  return (\r\n    <StyledTechnologyIconWrapper data-testid={'abouticons'}>\r\n      <StyledTechnologyIcon>\r\n        <ReactLogo size={mediumIcon} color=\"#61DBFB\" title=\"React\" />\r\n      </StyledTechnologyIcon>\r\n      <StyledTechnologyIcon>\r\n        <Redux size={mediumIcon} color=\"#764abc\" title=\"Redux\" />\r\n      </StyledTechnologyIcon>\r\n      <StyledTechnologyIcon>\r\n        <NodeJs size={mediumIcon} color=\"#3c873a\" title=\"NodeJs\" />\r\n      </StyledTechnologyIcon>\r\n      <StyledTechnologyIcon>\r\n        <Docker size={mediumIcon} color=\"#0db7ed\" title=\"Docker\" />\r\n      </StyledTechnologyIcon>\r\n      <StyledTechnologyIcon>\r\n        <Typescript size={mediumIcon} color=\"#007acc\" title=\"TypeScript\" />\r\n      </StyledTechnologyIcon>\r\n      <StyledTechnologyIcon>\r\n        <Mongodb size={mediumIcon} color=\"#3fa037\" title=\"mongoDB\" />\r\n      </StyledTechnologyIcon>\r\n      <StyledTechnologyIcon>\r\n        <Postgresql size={mediumIcon} color=\"#0064a5\" title=\"PostgreSQL\" />\r\n      </StyledTechnologyIcon>\r\n    </StyledTechnologyIconWrapper>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport { localizationSelector } from '../../features/localization/localizationSlice';\r\nimport { Locale } from '../../features/localization/locales';\r\nimport {\r\n  themeSelector,\r\n  ThemeProps,\r\n} from '../../features/themetoggle/themeToggleSlice';\r\n// Components\r\nimport { Picture } from './Picture';\r\nimport { TechnologyIcons } from './TechnologyIcons';\r\n// Styling\r\nimport {\r\n  StyledAboutContainer,\r\n  StyledTechnologyContainer,\r\n  StyledTextContainer,\r\n  StyledAboutWrapper,\r\n  StyledTechnologyWrapper,\r\n} from './about-styling';\r\n\r\nexport const About: FC = (): JSX.Element => {\r\n  const localization: Locale = useSelector(localizationSelector);\r\n  const { aboutDescription, aboutTechnologies, aboutHobbies } = localization;\r\n\r\n  const theme: ThemeProps = useSelector(themeSelector);\r\n  const { background } = theme;\r\n\r\n  return (\r\n    <StyledAboutContainer data-testid={'about'}>\r\n      <StyledAboutWrapper>\r\n        <StyledTextContainer background={background}>\r\n          <p data-testid={'aboutdescription'}>{aboutDescription}</p>\r\n          <p>{aboutHobbies}</p>\r\n        </StyledTextContainer>\r\n        <Picture />\r\n      </StyledAboutWrapper>\r\n      <StyledTechnologyContainer>\r\n        <StyledTechnologyWrapper background={background}>\r\n          <p>{aboutTechnologies}</p>\r\n          <TechnologyIcons />\r\n        </StyledTechnologyWrapper>\r\n      </StyledTechnologyContainer>\r\n    </StyledAboutContainer>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n// Variables\r\nimport {\r\n  darkBlue,\r\n  lightGray,\r\n  lightBlue,\r\n  lightBlueHover,\r\n  font10px,\r\n  font14px,\r\n} from '../../createGlobalStyle';\r\n\r\n// Invalid input warnings\r\nexport const StyledNotificationWarning = styled.div<{ visibility: number }>`\r\n  opacity: ${(props) => props.visibility};\r\n  font-size: ${font10px};\r\n  color: #ff6161;\r\n  font-weight: 550;\r\n  line-height: 1.2;\r\n  user-select: none;\r\n`;\r\n// Button container\r\nexport const StyledButtonContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n`;\r\n// Email status\r\nexport const StyledEmailNotification = styled.div<{ color: string }>`\r\n  font-size: ${font10px};\r\n  text-align: center;\r\n  line-height: 0.3;\r\n  color: ${(props) => props.color};\r\n  user-select: none;\r\n  font-weight: 550;\r\n`;\r\n// Characters left counter\r\nexport const StyledCharactersLeft = styled.p`\r\n  margin-top: 5px;\r\n  text-align: center;\r\n`;\r\n// Form container\r\nexport const StyledForm = styled.form`\r\n  color: ${lightGray};\r\n  background: ${darkBlue};\r\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 14px 55px,\r\n    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\r\n    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\r\n\r\n  border: 5px dashed ${lightBlue};\r\n  border-radius: 15px;\r\n  padding: 2vh;\r\n`;\r\n\r\n// Input field\r\nexport const StyledInput = styled.input<{\r\n  border: string;\r\n  shadow: string;\r\n}>`\r\n  outline: none;\r\n  font-size: ${font10px};\r\n  border: 2px solid ${(props) => props.border};\r\n  border-radius: 5px;\r\n  line-height: 1.2;\r\n  font-weight: 400;\r\n  margin-bottom: 0.5vh;\r\n\r\n  :focus {\r\n    box-shadow: 0 0 0 3px ${(props) => props.shadow};\r\n  }\r\n`;\r\n// Text area\r\nexport const StyledTextArea = styled.textarea<{\r\n  border: string;\r\n  shadow: string;\r\n}>`\r\n  outline: none;\r\n  font-size: ${font10px};\r\n  border: 2px solid ${(props) => props.border};\r\n  border-radius: 5px;\r\n  line-height: 1.2;\r\n  font-weight: 400;\r\n  margin-bottom: 0.5vh;\r\n  resize: vertical;\r\n\r\n  :focus {\r\n    box-shadow: 0 0 0 3px ${(props) => props.shadow};\r\n  }\r\n`;\r\n// Label\r\nexport const StyledLabel = styled.label`\r\n  user-select: none;\r\n  margin-bottom: 10px;\r\n  font-size: ${font10px};\r\n`;\r\n\r\n// Title and text below\r\nexport const StyledContactTitleContainer = styled.div`\r\n  border-radius: 15px;\r\n  font-size: ${font10px};\r\n  padding: 1vh;\r\n  font-weight: bold;\r\n  margin: 0.5vh;\r\n  margin-bottom: 1.5vh;\r\n  text-align: center;\r\n\r\n  @media only screen and (max-height: 500px) {\r\n    margin: 0.5rem;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n`;\r\n// Form section wrapper\r\nexport const StyledFormElement = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\n// Contact link container\r\nexport const StyledContactLinkContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 1rem;\r\n`;\r\n// Contact link wrapper\r\nexport const StyledContactLinkWrapper = styled.div`\r\n  background: #fafafa;\r\n  border: 2px solid ${lightBlue};\r\n  border-radius: 25px;\r\n  padding: 5px 2vh 5px 2vh;\r\n`;\r\n\r\n// Contact links\r\nexport const StyledContactLinkBig = styled.a`\r\n  margin-right: 5px;\r\n  text-decoration: none;\r\n  padding-right: 5px;\r\n`;\r\n\r\n// Submit button\r\nexport const StyledSubmitButton = styled.button`\r\n  background: ${lightBlue};\r\n  color: #ffff;\r\n  box-sizing: border-box;\r\n  cursor: pointer;\r\n  margin: ${font10px};\r\n  margin-top: 0;\r\n  padding: ${font10px};\r\n  font-size: ${font10px};\r\n  border-radius: 10px;\r\n  :hover {\r\n    background: ${lightBlueHover};\r\n  }\r\n`;\r\n// Main container\r\nexport const StyledContactContainer = styled.main`\r\n  z-index: 0;\r\n  margin-top: 2vh;\r\n  margin-bottom: 6vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n\r\n  @media only screen and (min-width: 900px) {\r\n    ${StyledContactTitleContainer} {\r\n      margin: 3vh;\r\n      font-size: ${font14px};\r\n    }\r\n\r\n    ${StyledForm} {\r\n      font-size: ${font14px};\r\n    }\r\n  }\r\n\r\n  @media only screen and (min-width: 1250px) {\r\n    margin-top: calc(20px + 8.5vh);\r\n  }\r\n\r\n  @media only screen and (max-height: 450px) and (min-width: 400px) {\r\n    ${StyledContactTitleContainer} {\r\n      margin-right: 20px;\r\n    }\r\n  }\r\n`;\r\n","import { FC, useEffect, useState } from 'react';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport { localizationSelector } from '../../features/localization/localizationSlice';\r\nimport { Locale } from '../../features/localization/locales';\r\n// Components\r\nimport { EmailSendingStyle } from './ContactForm';\r\n// Styling\r\nimport { StyledEmailNotification } from './contact-styling';\r\nimport { lightGray, lightGreen, lightRed } from '../../createGlobalStyle';\r\n\r\nexport interface EmailSentNotificationProps {\r\n  isEmailSent: EmailSendingStyle | string;\r\n}\r\nexport const EmailSentNotification: FC<EmailSentNotificationProps> = ({\r\n  isEmailSent,\r\n}) => {\r\n  // Localization\r\n  const localization: Locale = useSelector(localizationSelector);\r\n  const { sendEmailFailure, sendEmailSuccess, sendEmailLoading } = localization;\r\n  const [color, setColor] = useState<string>('');\r\n  const [text, setText] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    if (isEmailSent === EmailSendingStyle.LOADING) {\r\n      setColor(lightGray);\r\n      setText(sendEmailLoading);\r\n    } else if (isEmailSent === EmailSendingStyle.SUCCESS) {\r\n      setColor(lightGreen);\r\n      setText(sendEmailSuccess);\r\n    } else if (isEmailSent === EmailSendingStyle.FAILURE) {\r\n      setColor(lightRed);\r\n      setText(sendEmailFailure);\r\n    } else {\r\n      setColor('');\r\n      setText('');\r\n    }\r\n  }, [isEmailSent, sendEmailFailure, sendEmailSuccess, sendEmailLoading]);\r\n\r\n  return (\r\n    <StyledEmailNotification\r\n      color={color}\r\n      data-testid={'emailsentnotification'}\r\n    >\r\n      {text}\r\n    </StyledEmailNotification>\r\n  );\r\n};\r\n","/* This is just a simple check to see if email is in valid format\r\n\r\nfoo@bar.x will return true \r\n\r\nObviously this is not ideal, and sending an confirmation email would be the best way to handle this but I think this is too much for such a simple website\r\n*/\r\nexport const regexCheck = (input: string): boolean => {\r\n  const regex = new RegExp(/^([^.@]+)(\\.[^.@]+)*@([^.@]+\\.)+([^.@]+)$/);\r\n\r\n  return regex.test(input);\r\n};\r\n","import { FC } from 'react';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport { localizationSelector } from '../../features/localization/localizationSlice';\r\nimport { Locale } from '../../features/localization/locales';\r\n// Stylinng\r\nimport {\r\n  StyledContactTitleContainer,\r\n  StyledContactLinkBig,\r\n  StyledContactLinkContainer,\r\n  StyledContactLinkWrapper,\r\n} from './contact-styling';\r\n\r\nimport { Linkedin, Twitter, Facebook } from '@styled-icons/bootstrap';\r\nimport { GithubSquare } from '@styled-icons/fa-brands';\r\n\r\nexport const ContactTitle: FC = () => {\r\n  // Localization\r\n  const localization: Locale = useSelector(localizationSelector);\r\n  const { contactH1, contactMeText } = localization;\r\n\r\n  const github: string = `${process.env.REACT_APP_GITHUB}`;\r\n  const linkedin: string = `${process.env.REACT_APP_LINKEDIN}`;\r\n  const twitter: string = `${process.env.REACT_APP_TWITTER}`;\r\n  const facebook: string = `${process.env.REACT_APP_FACEBOOK}`;\r\n\r\n  return (\r\n    <StyledContactTitleContainer data-testid={'contacttitle'}>\r\n      <h1 data-testid={'contacttitletext'}>{contactH1}</h1>\r\n      <h2>{contactMeText}</h2>\r\n      <StyledContactLinkContainer>\r\n        <StyledContactLinkWrapper>\r\n          <StyledContactLinkBig href={github} target=\"_blank\" rel=\"noopener\">\r\n            <GithubSquare size=\"62\" color=\"#211f1f\" title=\"GitHub\" />\r\n          </StyledContactLinkBig>\r\n          <StyledContactLinkBig href={linkedin} target=\"_blank\" rel=\"noopener\">\r\n            <Linkedin size=\"54\" color=\"#0077B5\" title=\"LinkedIn\"></Linkedin>\r\n          </StyledContactLinkBig>\r\n          <StyledContactLinkBig href={twitter} target=\"_blank\" rel=\"noopener\">\r\n            <Twitter size=\"54\" color=\"#1DA1F2\" title=\"Twitter\"></Twitter>\r\n          </StyledContactLinkBig>\r\n          <StyledContactLinkBig href={facebook} target=\"_blank\" rel=\"noopener\">\r\n            <Facebook size=\"54\" color=\"#4267B2\" title=\"Facebook\"></Facebook>\r\n          </StyledContactLinkBig>\r\n        </StyledContactLinkWrapper>\r\n      </StyledContactLinkContainer>\r\n    </StyledContactTitleContainer>\r\n  );\r\n};\r\n","import { FC } from 'react';\r\n// Components\r\nimport { ContactForm } from './ContactForm';\r\nimport { ContactTitle } from './ContactTitle';\r\n// Stylinng\r\nimport { StyledContactContainer } from './contact-styling';\r\n\r\nexport const Contact: FC = () => {\r\n  return (\r\n    <StyledContactContainer data-testid={'contact'}>\r\n      <ContactTitle />\r\n      <ContactForm />\r\n    </StyledContactContainer>\r\n  );\r\n};\r\n","import styled from 'styled-components/macro';\r\nimport { Link } from 'react-router-dom';\r\n// Variables\r\nimport {\r\n  black,\r\n  lightBlue,\r\n  lightBlueHover,\r\n  font16px,\r\n  font10px,\r\n  font12px,\r\n  font14px,\r\n  font24px,\r\n} from '../../createGlobalStyle';\r\n\r\n// Link\r\nexport const StyledHomepageLink = styled(Link)`\r\n  cursor: pointer;\r\n  font-size: ${font16px};\r\n  font-weight: 600;\r\n  box-sizing: border-box;\r\n  margin: ${font10px};\r\n  padding: calc(5px + 1vh);\r\n  border: 2px solid ${black};\r\n  border-radius: 10px;\r\n  text-decoration: none;\r\n  outline: none;\r\n  color: ${black};\r\n  background: ${lightBlue};\r\n  :hover {\r\n    background: ${lightBlueHover};\r\n  }\r\n`;\r\n// Homepage container\r\nexport const HomepageContent = styled.main<{\r\n  background: string;\r\n  color: string;\r\n}>`\r\n  /* This margin centers the container */\r\n  margin: 0 auto;\r\n  z-index: 0;\r\n  margin-top: calc(20px + 6.5vh);\r\n  margin-bottom: 6vh;\r\n  user-select: none;\r\n  text-align: center;\r\n  color: ${(props) => props.color};\r\n  background: ${(props) => props.background};\r\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\r\n    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\r\n    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\r\n  font-size: ${font16px};\r\n  font-weight: 500;\r\n  border: 5px dashed ${lightBlue};\r\n  padding: ${font16px};\r\n  p,\r\n  h1,\r\n  h2 {\r\n    margin: 5px;\r\n  }\r\n  p :last-of-type {\r\n    margin-bottom: calc(30px + 1vh);\r\n  }\r\n  @media only screen and (min-width: 768px) {\r\n    font-size: ${font24px};\r\n  }\r\n  @media only screen and (max-width: 400px) {\r\n    font-size: ${font12px};\r\n  }\r\n  @media only screen and (max-width: 330px) {\r\n    font-size: ${font10px};\r\n  }\r\n  @media only screen and (max-height: 500px) {\r\n    font-size: ${font14px};\r\n    margin-bottom: 6rem;\r\n    margin-top: 4rem;\r\n  }\r\n`;\r\n","import { FC } from 'react';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport { localizationSelector } from '../../features/localization/localizationSlice';\r\nimport { Locale } from '../../features/localization/locales';\r\nimport {\r\n  themeSelector,\r\n  ThemeProps,\r\n} from '../../features/themetoggle/themeToggleSlice';\r\n// Styling\r\nimport { HomepageContent, StyledHomepageLink } from './homepage-styling';\r\n\r\nexport const Homepage: FC = (): JSX.Element => {\r\n  const localization: Locale = useSelector(localizationSelector);\r\n  const { homeH1, homeH2, homeDescription, homePassion, learnMore } =\r\n    localization;\r\n  const theme: ThemeProps = useSelector(themeSelector);\r\n  const { background, color } = theme;\r\n\r\n  return (\r\n    <HomepageContent\r\n      background={background}\r\n      color={color}\r\n      data-testid={'homepage'}\r\n    >\r\n      <h1 data-testid={'homepageh1'}>{homeH1}</h1>\r\n      <h2> {homeH2}</h2>\r\n      <p>{homeDescription}</p>\r\n      <p> {homePassion}</p>\r\n      <StyledHomepageLink to=\"/about\" data-testid={'homepagelinktoabout'}>\r\n        {learnMore}\r\n      </StyledHomepageLink>\r\n    </HomepageContent>\r\n  );\r\n};\r\n","// React router\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  themeSelector,\r\n  ThemeProps,\r\n} from './features/themetoggle/themeToggleSlice';\r\n// Components\r\nimport { Navbar } from './components/navbar/Navbar';\r\nimport { Footer } from './components/footer/Footer';\r\nimport { About } from './components/about/About';\r\nimport { Contact } from './components/contact/Contact';\r\nimport { Homepage } from './components/homepage/Homepage';\r\n// Styling\r\nimport { ThemeProvider } from 'styled-components';\r\nimport {\r\n  GlobalStyle,\r\n  MainContainer,\r\n  ContentContainer,\r\n} from './createGlobalStyle';\r\n// FontAwesome - no longer needed, changed to styled icons\r\n// import { library } from '@fortawesome/fontawesome-svg-core';\r\n// Adding icons to library makes it so I don't need to import them in every file - NOT NEEDED - keeping this as a reference\r\n// library.add(\r\n//   faReact,\r\n// );\r\n\r\n// Routes\r\nexport const home: string = '/';\r\nexport const about: string = '/about';\r\nexport const contact: string = '/contact';\r\n\r\nconst App = (): JSX.Element => {\r\n  // Assigning a theme based on store\r\n  const theme: ThemeProps = useSelector(themeSelector);\r\n\r\n  /* For a general path (eg. when someone enters an invalid route like /foo ) you need to do a <Router path=\"/\">\r\n     This can't be an exact path. All exact paths have to be ABOVE this path otherwise that path would always render. \r\n  */\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Router>\r\n        <GlobalStyle />\r\n        <MainContainer>\r\n          <Navbar />\r\n          <ContentContainer>\r\n            <Switch>\r\n              <Route exact path={about} component={About}></Route>\r\n              <Route exact path={contact} component={Contact}></Route>\r\n              <Route path={home} component={Homepage}></Route>\r\n            </Switch>\r\n          </ContentContainer>\r\n          <Footer />\r\n        </MainContainer>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  configureStore,\r\n  ThunkAction,\r\n  Action,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n  createStore,\r\n} from '@reduxjs/toolkit';\r\n// import { persistReducer } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport localizationReducer from '../features/localization/localizationSlice';\r\nimport themeToggleReducer from '../features/themetoggle/themeToggleSlice';\r\n/*\r\n * redux-persist is a tool that allow persisting the redux store between page refreshes etc. To make it work, define persistConfig and persistedReducer and pass persistConfig and rootReducer to persistedReducer then use it as default reducer. To stop getting serialization errors, you need to ignore persist action in middleware\r\n * \r\n * middleware: getDefaultMiddleware({\r\n    serializableCheck: { ignoredActions: ['persist/PERSIST'] },\r\n\r\n * After setting up store, you need to wrap your <App> (or only the components you want) component with <PersistGate loading={null} persistor={persistor}> which itself is wrapped by <Provider>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <BrowserRouter>\r\n          // App components here\r\n        </BrowserRouter>\r\n      </PersistGate>\r\n    </Provider>\r\n    \r\n */\r\n\r\n// Define rootReducer using combineReducers. Place all reducers inside as name: reducerName\r\nconst rootReducer = combineReducers({\r\n  localization: localizationReducer,\r\n  themeToggle: themeToggleReducer,\r\n});\r\n\r\n// // Redux persist config\r\n// const persistConfig = {\r\n//   key: 'root',\r\n//   storage,\r\n// };\r\n// // Redux persist reducer\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: { ignoredActions: ['persist/PERSIST'] },\r\n  }),\r\n});\r\n\r\n// For testing\r\nexport const createTestStore = () => {\r\n  const store = createStore(rootReducer);\r\n  return store;\r\n};\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// Redux\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n// import { persistStore, Persistor } from 'redux-persist';\r\n\r\n// redux-persist persistor\r\n// const persistor: Persistor = persistStore(store);\r\n\r\n// I'm removing Redux Persistor (for now) as I feel that it is not worth the headache required to implement proper cookie warning just so theme and language is persisted\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.register();\r\n"],"sourceRoot":""}